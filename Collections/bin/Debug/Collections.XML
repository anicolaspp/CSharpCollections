<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Collections</name>
    </assembly>
    <members>
        <member name="T:Nikos.ICloneable`1">
            <summary>
             Supports cloning with generic type
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Nikos.ICloneable`1.Clone">
            <summary>
             Creates a new object that is a copy of the current instance.
            </summary>
            <returns>A new object that is a copy of this instance.</returns>
        </member>
        <member name="M:Nikos.Collections.CircularLinkedNode`1.Clone">
            <summary>
             Creates a new object that is a copy of the current instance.
            </summary>
            <returns>A new object that is a copy of this instance.</returns>
        </member>
        <member name="M:Nikos.Collections.CircularLinkedNode`1.System#ICloneable#Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>
            A new object that is a copy of this instance.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="T:Nikos.Collections.CircularLinkedList`1">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Nikos.Collections.CircularLinkedList`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.
            </returns>
            <filterpriority>1</filterpriority>
        </member>
        <member name="M:Nikos.Collections.CircularLinkedList`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:Nikos.Collections.CircularLinkedList`1.Add(`0)">
            <summary>
            Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <param name="item">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param><exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.</exception>
        </member>
        <member name="M:Nikos.Collections.CircularLinkedList`1.Clear">
            <summary>
            Removes all items from the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only. </exception>
        </member>
        <member name="M:Nikos.Collections.CircularLinkedList`1.Contains(`0)">
            <summary>
            Determines whether the <see cref="T:System.Collections.Generic.ICollection`1"/> contains a specific value.
            </summary>
            <returns>
            true if <paramref name="item"/> is found in the <see cref="T:System.Collections.Generic.ICollection`1"/>; otherwise, false.
            </returns>
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
        </member>
        <member name="M:Nikos.Collections.CircularLinkedList`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:System.Collections.Generic.ICollection`1"/> to an <see cref="T:System.Array"/>, starting at a particular <see cref="T:System.Array"/> index.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array"/> that is the destination of the elements copied from <see cref="T:System.Collections.Generic.ICollection`1"/>. The <see cref="T:System.Array"/> must have zero-based indexing.</param><param name="arrayIndex">The zero-based index in <paramref name="array"/> at which copying begins.</param><exception cref="T:System.ArgumentNullException"><paramref name="array"/> is null.</exception><exception cref="T:System.ArgumentOutOfRangeException"><paramref name="arrayIndex"/> is less than 0.</exception><exception cref="T:System.ArgumentException"><paramref name="array"/> is multidimensional.-or-The number of elements in the source <see cref="T:System.Collections.Generic.ICollection`1"/> is greater than the available space from <paramref name="arrayIndex"/> to the end of the destination <paramref name="array"/>.-or-Type <paramref name="T"/> cannot be cast automatically to the type of the destination <paramref name="array"/>.</exception>
        </member>
        <member name="M:Nikos.Collections.CircularLinkedList`1.Remove(`0)">
            <summary>
            Removes the first occurrence of a specific object from the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <returns>
            true if <paramref name="item"/> was successfully removed from the <see cref="T:System.Collections.Generic.ICollection`1"/>; otherwise, false. This method also returns false if <paramref name="item"/> is not found in the original <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </returns>
            <param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param><exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.</exception>
        </member>
        <member name="M:Nikos.Collections.CircularLinkedList`1.Clone">
            <summary>
             Creates a new object that is a copy of the current instance.
            </summary>
            <returns>A new object that is a copy of this instance.</returns>
        </member>
        <member name="M:Nikos.Collections.CircularLinkedList`1.System#ICloneable#Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>
            A new object that is a copy of this instance.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="P:Nikos.Collections.CircularLinkedList`1.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <returns>
            The number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </returns>
        </member>
        <member name="P:Nikos.Collections.CircularLinkedList`1.IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.
            </summary>
            <returns>
            true if the <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only; otherwise, false.
            </returns>
        </member>
        <member name="T:Nikos.Collections.IPriorityQueue`1">
            <summary>
            Pattern of heap standart functions
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Nikos.Collections.IPriorityQueue`1.DecreaseKey(`0,System.Int32)">
            <summary>
            Change the value of priority to a especific item and reorganize the heap
            </summary>
            <param name="item">Item to change the priority</param>
            <param name="priority">New priority to item</param>
        </member>
        <member name="M:Nikos.Collections.IPriorityQueue`1.EnQueue(`0,System.Int32)">
            <summary>
            Enqueue item into heap with a priority
            </summary>
            <param name="item">item to enqueue</param>
            <param name="priority">priority of heap</param>
        </member>
        <member name="M:Nikos.Collections.IPriorityQueue`1.Peek">
            <summary>
            Get the item in the top of heap without remove it
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nikos.Collections.IPriorityQueue`1.DeQueue">
            <summary>
            Get the item in the top of heap and remove it
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nikos.Collections.IPriorityQueue`1.Contains(`0,System.Int32)">
            <summary>
            Determine if the heap constain a especific item with a especific priority
            </summary>
            <param name="item"></param>
            <param name="priority"></param>
            <returns></returns>
        </member>
        <member name="P:Nikos.Collections.IPriorityQueue`1.Count">
            <summary>
            Count of items into the heap
            </summary>
        </member>
        <member name="P:Nikos.Collections.IPriorityQueue`1.Capacity">
            <summary>
            Capacity of heap
            </summary>
        </member>
        <member name="P:Nikos.Collections.IPriorityQueue`1.HeapType">
            <summary>
            Get the type of heap based in priority
            </summary>
        </member>
        <member name="P:Nikos.Collections.IPriorityQueue`1.IsEmpty">
            <summary>
            Get if heap is empty
            </summary>
        </member>
        <member name="M:Nikos.Collections.BinomialHeap`1.#ctor(Nikos.Collections.HeapTypePriority)">
            <summary>
            </summary>
            <param name="heapType"></param>
        </member>
        <member name="M:Nikos.Collections.BinomialHeap`1.#ctor(System.Int32,Nikos.Collections.HeapTypePriority)">
            <summary>
            </summary>
            <param name="capacity"></param>
            <param name="heapType"></param>
        </member>
        <member name="M:Nikos.Collections.BinomialHeap`1.Build_Heap``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32},Nikos.Collections.HeapTypePriority)">
            <summary>
             Create a heap based in a IEnumerable with data, the construction is O(n) amortized cost
            </summary>
            <param name="souce">Data to build the heap</param>
            <param name="func">Extract the priority from the item</param>
            <param name="heapType"></param>
            <typeparam name="TK"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Nikos.Collections.BinomialHeap`1.Peek">
            <summary>
            Get the item in the top of heap without remove it
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nikos.Collections.BinomialHeap`1.DeQueue">
            <summary>
            Get the itemin the top of heap and remove it
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nikos.Collections.BinomialHeap`1.EnQueue(`0,System.Int32)">
            <summary>
            Enqueue item into heap with a priority
            </summary>
            <param name="item">item to enqueue</param>
            <param name="priority">priority of heap</param>
        </member>
        <member name="M:Nikos.Collections.BinomialHeap`1.Contains(`0,System.Int32)">
            <summary>
            Determine if the heap constain a especific item with a especific priority
            </summary>
            <param name="item"></param>
            <param name="priority"></param>
            <returns></returns>
        </member>
        <member name="M:Nikos.Collections.BinomialHeap`1.Contains(`0)">
            <summary>
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Nikos.Collections.BinomialHeap`1.GetEnumerator">
            <summary>
                                Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
                                A <see cref="T:System.Collections.Generic.IEnumerator`1" /> that can be used to iterate through the collection.
            </returns>
            <filterpriority>1</filterpriority>
        </member>
        <member name="M:Nikos.Collections.BinomialHeap`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
                                Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
                                An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:Nikos.Collections.BinomialHeap`1.Clone">
            <summary>
             Creates a new object that is a copy of the current instance.
            </summary>
            <returns>A new object that is a copy of this instance.</returns>
        </member>
        <member name="M:Nikos.Collections.BinomialHeap`1.System#ICloneable#Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>
            A new object that is a copy of this instance.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="P:Nikos.Collections.BinomialHeap`1.IsEmpty">
            <summary>
            Get if heap is empty
            </summary>
        </member>
        <member name="T:Nikos.ISizable">
            <summary>
            A Interface to determine the size of structure
            </summary>
        </member>
        <member name="M:Nikos.ISizable.get_Size">
            <summary>
            Retorna el tamanno en byte de la estructura
            </summary>
            <returns></returns>
        </member>
        <member name="T:Nikos.Collections.HD_Engine.B_TreeNode`1">
            <summary>
            Represent a node of BTree
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Nikos.Collections.HD_Engine.B_TreeNode`1.get_Size">
            <summary>
                        Retorna el tamanno en byte de la estructura
            </summary>
            <returns>
            </returns>
        </member>
        <member name="M:Nikos.Collections.HD_Engine.B_TreeNode`1.CompareTo(Nikos.Collections.INode{`0})">
            <summary>
                                Compares the current object with another object of the same type.
            </summary>
            <returns>
                                A 32-bit signed integer that indicates the relative order of the objects being compared. The return value has the following meanings: 
                                Value 
                                Meaning 
                                Less than zero 
                                This object is less than the <paramref name="other" /> parameter.
                                Zero 
                                This object is equal to <paramref name="other" />. 
                                Greater than zero 
                                This object is greater than <paramref name="other" />. 
            </returns>
            <param name="other">
                                An object to compare with this object.
                            </param>
        </member>
        <member name="M:Nikos.Collections.HD_Engine.B_TreeNode`1.CompareTo(System.Object)">
            <summary>
                                Compares the current instance with another object of the same type and returns an integer that indicates whether the current instance precedes, follows, or occurs in the same position in the sort order as the other object.
            </summary>
            <returns>
                                A 32-bit signed integer that indicates the relative order of the objects being compared. The return value has these meanings: 
                                Value 
                                Meaning 
                                Less than zero 
                                This instance is less than <paramref name="obj" />. 
                                Zero 
                                This instance is equal to <paramref name="obj" />. 
                                Greater than zero 
                                This instance is greater than <paramref name="obj" />. 
            </returns>
            <param name="obj">
                                An object to compare with this instance. 
                            </param>
            <exception cref="T:System.ArgumentException"><paramref name="obj" /> is not the same type as this instance. 
                            </exception><filterpriority>2</filterpriority>
        </member>
        <member name="P:Nikos.Collections.HD_Engine.B_TreeNode`1.Location">
            <summary>
            Location of node on file
            </summary>
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="P:Nikos.Collections.HD_Engine.B_TreeNode`1.IsLeaf">
            <summary>
            </summary>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="P:Nikos.Collections.HD_Engine.B_TreeNode`1.Degree">
            <summary>
             The degree of node
            </summary>
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="T:Nikos.Collections.HD_Engine.BT_Head">
            <summary>
            </summary>
        </member>
        <member name="T:Nikos.Collections.HD_Engine.NodeItem">
            <summary>
            Represent a Generic parameter of B-Tree
            The derived clases needen a default constructor for good functionality whith the B-Tree
            </summary>
        </member>
        <member name="M:Nikos.Collections.HD_Engine.NodeItem.ToByteArray">
            <summary>
            Get bytes of representation of class.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nikos.Collections.HD_Engine.NodeItem.LoadFromByteArray(System.Byte[])">
            <summary>
            Load to data-object data passed as parameters
            </summary>
            <param name="data">Data for load internal objects</param>
        </member>
        <member name="F:Nikos.Collections.HD_Engine.BT_Head.Size">
            <summary>
            Size of head of tree
            </summary>
        </member>
        <member name="F:Nikos.Collections.HD_Engine.BT_Head.index">
            <summary>
            The position of last lecture on LoadFromByteArray method.
            Use in derived classes for continous read in overrides methods
            </summary>
        </member>
        <member name="M:Nikos.Collections.HD_Engine.BT_Head.ToByteArray">
            <summary>
            Get the bytes than represent a class.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nikos.Collections.HD_Engine.BT_Head.LoadFromByteArray(System.Byte[])">
            <summary>
            Load to data-object the data passed as parameters
            </summary>
            <param name="data"></param>
        </member>
        <member name="T:Nikos.Collections.HD_Engine.B_Tree`1">
            <summary>
            Represent a B_Tree structure
            </summary>
            <typeparam name="T">Generic parameter</typeparam>
        </member>
        <member name="F:Nikos.Collections.HD_Engine.B_Tree`1.cache">
            <summary>
            Get access to memory cache
            </summary>
        </member>
        <member name="F:Nikos.Collections.HD_Engine.B_Tree`1.degree">
            <summary>
            Degree of tree
            </summary>
        </member>
        <member name="F:Nikos.Collections.HD_Engine.B_Tree`1.file">
            <summary>
            File of tree asociated
            </summary>
        </member>
        <member name="F:Nikos.Collections.HD_Engine.B_Tree`1.nodeSize">
            <summary>
            The size of nodes
            </summary>
        </member>
        <member name="F:Nikos.Collections.HD_Engine.B_Tree`1.optimezedWithCache">
            <summary>
            Indicate optimization with cache
            </summary>
        </member>
        <member name="F:Nikos.Collections.HD_Engine.B_Tree`1.root">
            <summary>
            The root of tree
            </summary>
        </member>
        <member name="F:Nikos.Collections.HD_Engine.B_Tree`1.tSize">
            <summary>
            Key size
            </summary>
        </member>
        <member name="M:Nikos.Collections.HD_Engine.B_Tree`1.GetHeadSize">
            <summary>
            Get a head size
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nikos.Collections.HD_Engine.B_Tree`1.GetNodeSize">
            <summary>
            Get the node size
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nikos.Collections.HD_Engine.B_Tree`1.GetTInstance">
            <summary>
            Get a instance of generic parameter
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nikos.Collections.HD_Engine.B_Tree`1.InitializeCache(System.Int32)">
            <summary>
            Inicialize the memory cache
            </summary>
            <param name="capacity">Capacity of memory in kilo bytes</param>
        </member>
        <member name="M:Nikos.Collections.HD_Engine.B_Tree`1.WriteHead">
            <summary>
            Write the head of tree into asociate stream
            </summary>
        </member>
        <member name="M:Nikos.Collections.HD_Engine.B_Tree`1.DiskWrite(Nikos.Collections.INode{`0})">
            <summary>
            Write a node into asociate stream
            </summary>
            <param name="x"></param>
        </member>
        <member name="M:Nikos.Collections.HD_Engine.B_Tree`1.DiskRead(System.IO.Stream,System.Int64)">
            <summary>
            Read one node from streams
            </summary>
            <param name="stream"></param>
            <param name="position"></param>
            <returns></returns>
        </member>
        <member name="M:Nikos.Collections.HD_Engine.B_Tree`1.BinarySearch(`0[],`0,System.Int32,System.Int32)">
            <summary>
            Performance a binary searsh into keys of values
            </summary>
            <param name="values">Value over make the search</param>
            <param name="value">Value to search</param>
            <param name="start">zero-based index to star the search</param>
            <param name="end">zero-based index to end the search</param>
            <returns></returns>
        </member>
        <member name="M:Nikos.Collections.HD_Engine.B_Tree`1.InOrderTreeWalk(Nikos.Collections.INode{`0})">
            <summary>
            In orden walk over one node
            </summary>
            <param name="node"></param>
            <returns></returns>
        </member>
        <member name="M:Nikos.Collections.HD_Engine.B_Tree`1.InBackOrderTreeWalk(Nikos.Collections.INode{`0})">
            <summary>
            In back orden walk over one node
            </summary>
            <param name="node"></param>
            <returns></returns>
        </member>
        <member name="M:Nikos.Collections.HD_Engine.B_Tree`1.#ctor(System.Int32,System.IO.Stream,Nikos.Collections.HD_Engine.Allocator,System.Boolean,System.Int32)">
            <summary>
            Create a new B_Tree
            </summary>
            <param name="degree">Degree of tree</param>
            <param name="stream">Stream asociated to B_Tree</param>
            <param name="engine"></param>
            <param name="usingCache">Indicated optimization with cache</param>
            <param name="cacheCapacity">Capacy of cache, if cache was created this parameter is ignorer</param>
        </member>
        <member name="M:Nikos.Collections.HD_Engine.B_Tree`1.#ctor(System.IO.Stream,Nikos.Collections.HD_Engine.Allocator,System.Boolean,System.Int32)">
            <summary>
            Create a new B_Tree
            </summary>
            <param name="stream"></param>
            <param name="engine"></param>
            <param name="usingCache"></param>
            <param name="cacheCapacity"></param>
        </member>
        <member name="M:Nikos.Collections.HD_Engine.B_Tree`1.#ctor(System.IO.FileStream,Nikos.Collections.HD_Engine.BT_Head,Nikos.Collections.HD_Engine.ResolveEngineMethod)">
            <summary>
            Create a B_Tree 
            </summary>
            <param name="stream"></param>
            <param name="head"></param>
            <param name="engineMethod"></param>
        </member>
        <member name="M:Nikos.Collections.HD_Engine.B_Tree`1.Load(System.IO.FileStream,System.Int64,Nikos.Collections.HD_Engine.ResolveEngineMethod)">
            <summary>
             Carga el B_Tree dado un archivo y la posicion de la cabecera
            </summary>
            <param name="stream"></param>
            <param name="headPosition"></param>
            <param name="engineMethod"></param>
            <returns></returns>
        </member>
        <member name="M:Nikos.Collections.HD_Engine.B_Tree`1.InOrderTreeWalk">
            <summary>
            In orden walk over BTree
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nikos.Collections.HD_Engine.B_Tree`1.InBackOrderTreeWalk">
            <summary>
            In back orden walk over BTree
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nikos.Collections.HD_Engine.B_Tree`1.LessThan(`0)">
            <summary>
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Nikos.Collections.HD_Engine.B_Tree`1.GreatherThan(`0)">
            <summary>
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Nikos.Collections.HD_Engine.B_Tree`1.Between(`0,`0)">
            <summary>
            </summary>
            <param name="value1"></param>
            <param name="value2"></param>
            <returns></returns>
        </member>
        <member name="M:Nikos.Collections.HD_Engine.B_Tree`1.GetEnumerator">
            <summary>
                                Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
                                A <see cref="T:System.Collections.Generic.IEnumerator`1" /> that can be used to iterate through the collection.
            </returns>
            <filterpriority>1</filterpriority>
        </member>
        <member name="M:Nikos.Collections.HD_Engine.B_Tree`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
                                Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
                                An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:Nikos.Collections.HD_Engine.B_Tree`1.Dispose">
            <summary>
                                Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:Nikos.Collections.HD_Engine.B_Tree`1.Add(`0)">
            <summary>
            Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <param name="item">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1"/>.
                            </param><exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.
                            </exception>
        </member>
        <member name="M:Nikos.Collections.HD_Engine.B_Tree`1.Clear">
            <summary>
            Removes all items from the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only. 
                            </exception>
        </member>
        <member name="M:Nikos.Collections.HD_Engine.B_Tree`1.Contains(`0)">
            <summary>
            Determines whether the <see cref="T:System.Collections.Generic.ICollection`1"/> contains a specific value.
            </summary>
            <returns>
            true if <paramref name="item"/> is found in the <see cref="T:System.Collections.Generic.ICollection`1"/>; otherwise, false.
            </returns>
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1"/>.
                            </param>
        </member>
        <member name="M:Nikos.Collections.HD_Engine.B_Tree`1.ContainsI(`0)">
            <summary>
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Nikos.Collections.HD_Engine.B_Tree`1.Contains(`0,Nikos.Collections.INode{`0}@)">
            <summary>
             Verifi if a value is in tree
            </summary>
            <param name="value">value to search</param>
            <param name="x"> the out node where the value is</param>
            <returns>return a zero-based value than is the index of serached value into out node</returns>
        </member>
        <member name="M:Nikos.Collections.HD_Engine.B_Tree`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:System.Collections.Generic.ICollection`1"/> to an <see cref="T:System.Array"/>, starting at a particular <see cref="T:System.Array"/> index.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array"/> that is the destination of the elements copied from <see cref="T:System.Collections.Generic.ICollection`1"/>. The <see cref="T:System.Array"/> must have zero-based indexing.
                            </param><param name="arrayIndex">The zero-based index in <paramref name="array"/> at which copying begins.
                            </param><exception cref="T:System.ArgumentNullException"><paramref name="array"/> is null.
                            </exception><exception cref="T:System.ArgumentOutOfRangeException"><paramref name="arrayIndex"/> is less than 0.
                            </exception><exception cref="T:System.ArgumentException"><paramref name="array"/> is multidimensional.
                                -or-
                            <paramref name="arrayIndex"/> is equal to or greater than the length of <paramref name="array"/>.
                                -or-
                                The number of elements in the source <see cref="T:System.Collections.Generic.ICollection`1"/> is greater than the available space from <paramref name="arrayIndex"/> to the end of the destination <paramref name="array"/>.
                                -or-
                                Type <paramref name="T"/> cannot be cast automatically to the type of the destination <paramref name="array"/>.
                            </exception>ku
        </member>
        <member name="M:Nikos.Collections.HD_Engine.B_Tree`1.Remove(`0)">
            <summary>
            Removes the first occurrence of a specific object from the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <returns>
            true if <paramref name="item"/> was successfully removed from the <see cref="T:System.Collections.Generic.ICollection`1"/>; otherwise, false. This method also returns false if <paramref name="item"/> is not found in the original <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </returns>
            <param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1"/>.
                            </param><exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.
                            </exception>
        </member>
        <member name="P:Nikos.Collections.HD_Engine.B_Tree`1.Head">
            <summary>
            Head of tree
            </summary>
        </member>
        <member name="P:Nikos.Collections.HD_Engine.B_Tree`1.OptimezedWithCache">
            <summary>
            Determine if tree is optimezed with cache
            </summary>
        </member>
        <member name="P:Nikos.Collections.HD_Engine.B_Tree`1.Max">
            <summary>
            Get the maximun item on tree
            </summary>
        </member>
        <member name="P:Nikos.Collections.HD_Engine.B_Tree`1.Min">
            <summary>
            Get the minimum item on tree
            </summary>
        </member>
        <member name="P:Nikos.Collections.HD_Engine.B_Tree`1.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            This property should not be called because is not optimized on this data-structure
            </summary>
            <returns>
            The number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </returns>
        </member>
        <member name="P:Nikos.Collections.HD_Engine.B_Tree`1.IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.
            </summary>
            <returns>
            true if the <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only; otherwise, false.
            </returns>
        </member>
        <member name="M:Nikos.Collections.ITree`1.Min">
            <summary>
            Get min value of tree
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nikos.Collections.ITree`1.Max">
            <summary>
            Get max valur of tree
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nikos.Collections.ITree`1.InOrderTreeWalk">
            <summary>
            Get the in order walk of tree
            </summary>
            <returns></returns>
        </member>
        <member name="P:Nikos.Collections.ITree`1.Root">
            <summary>
            Tree's root
            </summary>
        </member>
        <member name="M:Nikos.Collections.Graphs.MatrixGraph.Clone">
            <summary>
             Creates a new object that is a copy of the current instance.
            </summary>
            <returns>A new object that is a copy of this instance.</returns>
        </member>
        <member name="M:Nikos.Collections.Graphs.MatrixGraph.System#ICloneable#Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>
            A new object that is a copy of this instance.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:Nikos.Collections.SkipNode`1.CompareTo(Nikos.Collections.SkipNode{`0})">
            <summary>
            Compares the current object with another object of the same type.
            </summary>
            <returns>
            A value that indicates the relative order of the objects being compared. The return value has the following meanings: Value Meaning Less than zero This object is less than the <paramref name="other"/> parameter.Zero This object is equal to <paramref name="other"/>. Greater than zero This object is greater than <paramref name="other"/>. 
            </returns>
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="T:Nikos.Collections.HD_Engine.Allocator">
            <summary>
            </summary>
        </member>
        <member name="T:Nikos.Collections.AVL_Node`1">
            <summary>
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:Nikos.Collections.AVL_Node`1.Key">
            <summary>
            </summary>
        </member>
        <member name="M:Nikos.Collections.Pair`2.CompareTo(Nikos.Collections.Pair{`0,`1})">
            <summary>
            Compares the current object with another object of the same type.
            </summary>
            <returns>
            A value that indicates the relative order of the objects being compared. The return value has the following meanings: Value Meaning Less than zero This object is less than the <paramref name="other"/> parameter.Zero This object is equal to <paramref name="other"/>. Greater than zero This object is greater than <paramref name="other"/>. 
            </returns>
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="F:Nikos.Collections.Trie.SpecialChar">
            <summary>
            </summary>
        </member>
        <member name="M:Nikos.Collections.Trie.#ctor">
            <summary>
            </summary>
        </member>
        <member name="M:Nikos.Collections.Trie.Prefixs(System.String)">
            <summary>
            </summary>
            <param name="pWord"></param>
            <returns></returns>
        </member>
        <member name="M:Nikos.Collections.Trie.Sorted">
            <summary>
             Return a new Trie sorted
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nikos.Collections.Trie.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.
            </returns>
            <filterpriority>1</filterpriority>
        </member>
        <member name="M:Nikos.Collections.Trie.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:Nikos.Collections.Trie.Clone">
            <summary>
             Creates a new object that is a copy of the current instance.
            </summary>
            <returns>A new object that is a copy of this instance.</returns>
        </member>
        <member name="M:Nikos.Collections.Trie.System#ICloneable#Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>
            A new object that is a copy of this instance.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:Nikos.Collections.Trie.Add(System.String)">
            <summary>
            Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <param name="item">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param><exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.</exception>
        </member>
        <member name="M:Nikos.Collections.Trie.Clear">
            <summary>
            Removes all items from the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only. </exception>
        </member>
        <member name="M:Nikos.Collections.Trie.Contains(System.String)">
            <summary>
            Determines whether the <see cref="T:System.Collections.Generic.ICollection`1"/> contains a specific value.
            </summary>
            <returns>
            true if <paramref name="item"/> is found in the <see cref="T:System.Collections.Generic.ICollection`1"/>; otherwise, false.
            </returns>
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
        </member>
        <member name="M:Nikos.Collections.Trie.CopyTo(System.String[],System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:System.Collections.Generic.ICollection`1"/> to an <see cref="T:System.Array"/>, starting at a particular <see cref="T:System.Array"/> index.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array"/> that is the destination of the elements copied from <see cref="T:System.Collections.Generic.ICollection`1"/>. The <see cref="T:System.Array"/> must have zero-based indexing.</param><param name="arrayIndex">The zero-based index in <paramref name="array"/> at which copying begins.</param><exception cref="T:System.ArgumentNullException"><paramref name="array"/> is null.</exception><exception cref="T:System.ArgumentOutOfRangeException"><paramref name="arrayIndex"/> is less than 0.</exception><exception cref="T:System.ArgumentException"><paramref name="array"/> is multidimensional.-or-The number of elements in the source <see cref="T:System.Collections.Generic.ICollection`1"/> is greater than the available space from <paramref name="arrayIndex"/> to the end of the destination <paramref name="array"/>.-or-Type <paramref name="T"/> cannot be cast automatically to the type of the destination <paramref name="array"/>.</exception>
        </member>
        <member name="M:Nikos.Collections.Trie.Remove(System.String)">
            <summary>
            Removes the first occurrence of a specific object from the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <returns>
            true if <paramref name="item"/> was successfully removed from the <see cref="T:System.Collections.Generic.ICollection`1"/>; otherwise, false. This method also returns false if <paramref name="item"/> is not found in the original <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </returns>
            <param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param><exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.</exception>
        </member>
        <member name="M:Nikos.Collections.Trie.Min">
            <summary>
            Get min value of tree
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nikos.Collections.Trie.Max">
            <summary>
            Get max valur of tree
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nikos.Collections.Trie.InOrderTreeWalk">
            <summary>
            Get the in order walk of tree
            </summary>
            <returns></returns>
        </member>
        <member name="P:Nikos.Collections.Trie.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <returns>
            The number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </returns>
        </member>
        <member name="P:Nikos.Collections.Trie.IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.
            </summary>
            <returns>
            true if the <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only; otherwise, false.
            </returns>
        </member>
        <member name="P:Nikos.Collections.Trie.Root">
            <summary>
            Tree's root
            </summary>
        </member>
        <member name="T:Nikos.Collections.Stack`1">
            <summary>
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Nikos.Collections.Stack`1.#ctor(System.Int32)">
            <summary>
            </summary>
            <param name="capacity"></param>
        </member>
        <member name="M:Nikos.Collections.Stack`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            </summary>
            <param name="source"></param>
        </member>
        <member name="M:Nikos.Collections.Stack`1.Push(`0)">
            <summary>
            </summary>
            <param name="value"></param>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:Nikos.Collections.Stack`1.Pop">
            <summary>
            </summary>
            <returns></returns>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:Nikos.Collections.Stack`1.Pick">
            <summary>
            </summary>
            <returns></returns>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:Nikos.Collections.Stack`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.
            </returns>
            <filterpriority>1</filterpriority>
        </member>
        <member name="M:Nikos.Collections.Stack`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="P:Nikos.Collections.Stack`1.Count">
            <summary>
            </summary>
        </member>
        <member name="P:Nikos.Collections.Stack`1.Capacity">
            <summary>
            </summary>
        </member>
        <member name="T:Nikos.Collections.Interfaces.IAlgorithm">
            <summary>
            
            </summary>
        </member>
        <member name="M:Nikos.Collections.Interfaces.IAlgorithm.Run(System.Object[])">
            <summary>
            
            </summary>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="T:Nikos.Collections.AVL_Tree`1">
            <summary>
            Represent a AVL tree structure; the operations over AVL tree are O(log n)
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Nikos.Collections.AVL_Tree`1.#ctor">
            <summary>
            Create a new AVL tree
            </summary>
        </member>
        <member name="M:Nikos.Collections.AVL_Tree`1.#ctor(`0[])">
            <summary>
            Create a new AVL tree
            </summary>
            <param name="data">Data to add of tree</param>
        </member>
        <member name="M:Nikos.Collections.AVL_Tree`1.PreOrden">
            <summary>
            The pre-order walk on tree
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nikos.Collections.AVL_Tree`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:System.Collections.Generic.ICollection`1" /> to an <see cref="T:System.Array" />, starting at a particular <see cref="T:System.Array" /> index.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array" /> that is the destination of the elements copied from <see cref="T:System.Collections.Generic.ICollection`1" />. The <see cref="T:System.Array" /> must have zero-based indexing.</param>
            <param name="arrayIndex">The zero-based index in <paramref name="array" /> at which copying begins.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="array" /> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="arrayIndex" /> is less than 0.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="array" /> is multidimensional.-or-<paramref name="arrayIndex" /> is equal to or greater than the length of <paramref name="array" />.-or-The number of elements in the source <see cref="T:System.Collections.Generic.ICollection`1" /> is greater than the available space from <paramref name="arrayIndex" /> to the end of the destination <paramref name="array" />.-or-Type <paramref name="T"></paramref>
            	cannot be cast automatically to the type of the destination <paramref name="array" />.</exception>
        </member>
        <member name="M:Nikos.Collections.AVL_Tree`1.Remove(`0)">
            <summary>
            Removes the first occurrence of a specific object from the <see cref="T:System.Collections.Generic.ICollection`1" />.
            </summary>
            <returns>
            true if <paramref name="item" /> was successfully removed from the <see cref="T:System.Collections.Generic.ICollection`1" />; otherwise, false. This method also returns false if <paramref name="item" /> is not found in the original <see cref="T:System.Collections.Generic.ICollection`1" />.
            </returns>
            <param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only.</exception>
        </member>
        <member name="M:Nikos.Collections.AVL_Tree`1.Add(`0)">
            <summary>
            Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1" />.
            </summary>
            <param name="item">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only.</exception>
        </member>
        <member name="M:Nikos.Collections.AVL_Tree`1.System#Collections#Generic#ICollection{T}#Contains(`0)">
            <summary>
            Determines whether the <see cref="T:System.Collections.Generic.ICollection`1" /> contains a specific value.
            </summary>
            <returns>
            true if <paramref name="item" /> is found in the <see cref="T:System.Collections.Generic.ICollection`1" />; otherwise, false.
            </returns>
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
        </member>
        <member name="M:Nikos.Collections.AVL_Tree`1.Contains(`0,Nikos.Collections.AVL_Node{`0}@)">
            <summary>
            Determine if a item is in tree
            </summary>
            <param name="item">Item to searsh</param>
            <param name="output">the node that contain the item if the item is on </param>
            <returns></returns>
        </member>
        <member name="M:Nikos.Collections.AVL_Tree`1.ContainsI(`0)">
            <summary>
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Nikos.Collections.AVL_Tree`1.Contains(`0)">
            <summary>
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Nikos.Collections.AVL_Tree`1.Clear">
            <summary>
            Removes all items from the <see cref="T:System.Collections.Generic.ICollection`1" />.
            </summary>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only. </exception>
        </member>
        <member name="M:Nikos.Collections.AVL_Tree`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:Nikos.Collections.AVL_Tree`1.GreaterThan(`0)">
            <summary>
            Get the items greather than value in tree
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Nikos.Collections.AVL_Tree`1.LessThan(`0)">
            <summary>
            Get the items less than value in tree
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Nikos.Collections.AVL_Tree`1.Min">
            <summary>
            Get min value of tree
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nikos.Collections.AVL_Tree`1.Max">
            <summary>
            Get max valur of tree
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nikos.Collections.AVL_Tree`1.InOrderTreeWalk">
            <summary>
            Get the in order walk of tree
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nikos.Collections.AVL_Tree`1.Clone">
            <summary>
             Creates a new object that is a copy of the current instance.
            </summary>
            <returns>A new object that is a copy of this instance.</returns>
        </member>
        <member name="M:Nikos.Collections.AVL_Tree`1.System#ICloneable#Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>
            A new object that is a copy of this instance.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="P:Nikos.Collections.AVL_Tree`1.C_Root">
            <summary>
            The root node
            </summary>
        </member>
        <member name="P:Nikos.Collections.AVL_Tree`1.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1" />.
            </summary>
            <returns>
            The number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1" />.
            </returns>
        </member>
        <member name="P:Nikos.Collections.AVL_Tree`1.IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only.
            </summary>
            <returns>
            true if the <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only; otherwise, false.
            </returns>
        </member>
        <member name="P:Nikos.Collections.AVL_Tree`1.Root">
            <summary>
            Tree's root
            </summary>
        </member>
        <member name="T:Nikos.Collections.HeapTypePriority">
            <summary>
            Describe que tipo de Heap se va a utilizar
            </summary>
        </member>
        <member name="T:Nikos.Collections.SkipList`1">
            <summary>
            Represent a SkipList data structure
            </summary>
            <typeparam name="T">Generic parameter</typeparam>
        </member>
        <member name="M:Nikos.Collections.SkipList`1.#ctor(System.Int64)">
            <summary>
             Create a new instance of SkipList
            </summary>
            <param name="maxNodes"></param>
        </member>
        <member name="T:Nikos.Collections.HD_Engine.ResolveEngineMethod">
            <summary>
            </summary>
            <param name="stream"></param>
            <param name="offset"></param>
            <param name="args"></param>
        </member>
        <member name="T:Nikos.Collections.HD_Engine.AllocateEventHandler">
            <summary>
            </summary>
            <param name="sender"></param>
            <param name="currentPosition"></param>
        </member>
        <member name="T:Nikos.Collections.HD_Engine.UnAllocateEventHandler">
            <summary>
            </summary>
            <param name="sender"></param>
            <param name="currentPosition"></param>
        </member>
        <member name="M:Nikos.Cache.CacheItem`1.Equals(System.Object)">
            <summary>
            
                                Determines whether the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Object" />.
                            
            </summary>
            
            <returns>
            true if the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Object" />; otherwise, false.
                            
            </returns>
            
            <param name="obj">
                                The <see cref="T:System.Object" /> to compare with the current <see cref="T:System.Object" />. 
                            </param>
            <exception cref="T:System.NullReferenceException">
                                The <paramref name="obj" /> parameter is null.
                            </exception><filterpriority>2</filterpriority>
        </member>
        <member name="M:Nikos.Cache.CacheItem`1.get_Size">
            <summary>
                        Retorna el tamanno en byte de la estructura
            </summary>
            <returns>
            </returns>
        </member>
        <member name="T:Nikos.Algorithms.Huffman">
            <summary>
            
            </summary>
        </member>
        <member name="T:Nikos.Collections.RBTree`1">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Nikos.Collections.RBTree`1.#ctor(`0)">
            <summary>
            </summary>
            <param name="element"></param>
        </member>
        <member name="M:Nikos.Collections.RBTree`1.FindMin">
            <summary>
            </summary>
            <returns></returns>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:Nikos.Collections.RBTree`1.FindMax">
            <summary>
            </summary>
            <returns></returns>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:Nikos.Collections.RBTree`1.Find(`0)">
            <summary>
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Nikos.Collections.RBTree`1.InOrden">
            <summary>
            </summary>
            <returns></returns>
        </member>
        <member name="M:Nikos.Collections.RBTree`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.
            </returns>
            <filterpriority>1</filterpriority>
        </member>
        <member name="M:Nikos.Collections.RBTree`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:Nikos.Collections.RBTree`1.Add(`0)">
            <summary>
            Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <param name="item">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param><exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.</exception>
        </member>
        <member name="M:Nikos.Collections.RBTree`1.Clear">
            <summary>
            Removes all items from the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only. </exception>
        </member>
        <member name="M:Nikos.Collections.RBTree`1.Contains(`0)">
            <summary>
            Determines whether the <see cref="T:System.Collections.Generic.ICollection`1"/> contains a specific value.
            </summary>
            <returns>
            true if <paramref name="item"/> is found in the <see cref="T:System.Collections.Generic.ICollection`1"/>; otherwise, false.
            </returns>
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param>
        </member>
        <member name="M:Nikos.Collections.RBTree`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:System.Collections.Generic.ICollection`1"/> to an <see cref="T:System.Array"/>, starting at a particular <see cref="T:System.Array"/> index.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array"/> that is the destination of the elements copied from <see cref="T:System.Collections.Generic.ICollection`1"/>. The <see cref="T:System.Array"/> must have zero-based indexing.</param><param name="arrayIndex">The zero-based index in <paramref name="array"/> at which copying begins.</param><exception cref="T:System.ArgumentNullException"><paramref name="array"/> is null.</exception><exception cref="T:System.ArgumentOutOfRangeException"><paramref name="arrayIndex"/> is less than 0.</exception><exception cref="T:System.ArgumentException"><paramref name="array"/> is multidimensional.-or-The number of elements in the source <see cref="T:System.Collections.Generic.ICollection`1"/> is greater than the available space from <paramref name="arrayIndex"/> to the end of the destination <paramref name="array"/>.-or-Type <paramref name="T"/> cannot be cast automatically to the type of the destination <paramref name="array"/>.</exception>
        </member>
        <member name="M:Nikos.Collections.RBTree`1.Remove(`0)">
            <summary>
            Removes the first occurrence of a specific object from the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <returns>
            true if <paramref name="item"/> was successfully removed from the <see cref="T:System.Collections.Generic.ICollection`1"/>; otherwise, false. This method also returns false if <paramref name="item"/> is not found in the original <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </returns>
            <param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1"/>.</param><exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.</exception>
        </member>
        <member name="M:Nikos.Collections.RBTree`1.Clone">
            <summary>
             Creates a new object that is a copy of the current instance.
            </summary>
            <returns>A new object that is a copy of this instance.</returns>
        </member>
        <member name="M:Nikos.Collections.RBTree`1.System#ICloneable#Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>
            A new object that is a copy of this instance.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="P:Nikos.Collections.RBTree`1.IsEmpty">
            <summary>
            </summary>
        </member>
        <member name="P:Nikos.Collections.RBTree`1.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <returns>
            The number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </returns>
        </member>
        <member name="P:Nikos.Collections.RBTree`1.IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only.
            </summary>
            <returns>
            true if the <see cref="T:System.Collections.Generic.ICollection`1"/> is read-only; otherwise, false.
            </returns>
        </member>
        <member name="T:Nikos.Collections.ItemColor`1">
            <summary>
            Represent the color of a item 
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:Nikos.Collections.ItemColor`1.Element">
            <summary>
            </summary>
        </member>
        <member name="P:Nikos.Collections.ItemColor`1.Color">
            <summary>
            </summary>
        </member>
        <member name="M:Nikos.Collections.Graphs.AdjacenyListGraph.Clone">
            <summary>
             Creates a new object that is a copy of the current instance.
            </summary>
            <returns>A new object that is a copy of this instance.</returns>
        </member>
        <member name="M:Nikos.Collections.Graphs.AdjacenyListGraph.System#ICloneable#Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>
            A new object that is a copy of this instance.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:Nikos.Collections.TrieNode.Clone">
            <summary>
             Creates a new object that is a copy of the current instance.
            </summary>
            <returns>A new object that is a copy of this instance.</returns>
        </member>
        <member name="M:Nikos.Collections.TrieNode.System#ICloneable#Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>
            A new object that is a copy of this instance.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:Nikos.Collections.TrieNode.CompareTo(Nikos.Collections.TrieNode)">
            <summary>
            Compares the current object with another object of the same type.
            </summary>
            <returns>
            A value that indicates the relative order of the objects being compared. The return value has the following meanings: Value Meaning Less than zero This object is less than the <paramref name="other"/> parameter.Zero This object is equal to <paramref name="other"/>. Greater than zero This object is greater than <paramref name="other"/>. 
            </returns>
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="T:Nikos.Cache.MemoryCache`1">
            <summary>
             Memory Stystem Cache
            </summary>
            <typeparam name="T">Type of elemente on the memory</typeparam>
        </member>
        <member name="M:Nikos.Cache.MemoryCache`1.Get_Intance(System.Int64)">
            <summary>
            Get acces to the memory cache
            </summary>
            <param name="capacity">Capacity (in KBs) of memory, if the memory was created this parameter is ignored</param>
            <returns></returns>
        </member>
        <member name="M:Nikos.Cache.MemoryCache`1.Add(System.Object,`0)">
            <summary>
            Add element to cache
            </summary>
            <param name="value">Value to adapted</param>
            <summary>
            Add element to cache
            </summary>
            <param name="owner">The owner of value</param>
            <param name="value">Value to adapted</param>
        </member>
        <member name="M:Nikos.Cache.MemoryCache`1.Add(System.Object,`0,Nikos.Cache.MethodInvoke)">
            <summary>
            Add element to cache
            </summary>
            <param name="owner">The owner of value</param>
            <param name="value">Value to adapted</param>
            <param name="method">The method to execute when remove the item from cache</param>
        </member>
        <member name="M:Nikos.Cache.MemoryCache`1.Remove(System.Object,`0)">
            <summary>
            Remove a value of cache
            Execute the asociated method with value before removed
            </summary>
            <param name="owner">Owner of value</param>
            <param name="value">Value to remove</param>
        </member>
        <member name="M:Nikos.Cache.MemoryCache`1.Contains(System.Object,`0)">
            <summary>
             Determine if a element is on cache
            </summary>
            <param name="owner"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Nikos.Cache.MemoryCache`1.Find(System.Object,System.Func{`0,System.IComparable},System.IComparable)">
            <summary>
            Find a element on cache with specific function
            </summary>
            <param name="owner">Owner of element</param>
            <param name="func">Convert the value to IComparable for search on cache</param>
            <param name="value">Value to find</param>
            <returns></returns>
        </member>
        <member name="M:Nikos.Cache.MemoryCache`1.FindAll(System.Object,System.Func{`0,System.IComparable},System.IComparable)">
            <summary>
             Find all elements on cache with specific function
            </summary>
            <param name="owner">Owner of element</param>
            <param name="func">Convert the value to IComparable for search on cache</param>
            <param name="value">Value to find</param>
            <returns></returns>
        </member>
        <member name="M:Nikos.Cache.MemoryCache`1.Clear(System.Object,System.Boolean)">
            <summary>
            Clear memory asociated to especific owner
            </summary>
            <param name="owner">The owner of element to clear</param>
            <param name="performanceOperationPendding"></param>
        </member>
        <member name="M:Nikos.Cache.MemoryCache`1.UpDate(System.Object)">
            <summary>
            Performance the action asociate to the item of cache for all item of owner
            </summary>
            <param name="owner">Owner of items</param>
        </member>
        <member name="M:Nikos.Cache.MemoryCache`1.UpDateAll">
            <summary>
            Performance the action asociate to all items on cache
            </summary>
        </member>
        <member name="M:Nikos.Cache.MemoryCache`1.Dispose">
            <summary>
                                Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
                                Clear all element for each owner
            </summary>
            <filterpriority>2</filterpriority>
        </member>
        <member name="P:Nikos.Cache.MemoryCache`1.Capacity">
            <summary>
            Capacity of memory
            </summary>
        </member>
        <member name="P:Nikos.Cache.MemoryCache`1.RealSize">
            <summary>
            The real size of memory
            </summary>
        </member>
        <member name="T:Nikos.Collections.Dictionary`2">
            <summary>
            Represent a dictionary of TKey and TValue pair; the implementation using AVL structure to performance the
            operations
            </summary>
            <typeparam name="TKey">The type of keys</typeparam>
            <typeparam name="TValue">The type of values</typeparam>
        </member>
        <member name="M:Nikos.Collections.Dictionary`2.#ctor">
            <summary>
             Create a new instance of dictionary
            </summary>
        </member>
        <member name="M:Nikos.Collections.Dictionary`2.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1" /> that can be used to iterate through the collection.
            </returns>
            <filterpriority>1</filterpriority>
        </member>
        <member name="M:Nikos.Collections.Dictionary`2.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:Nikos.Collections.Dictionary`2.Add(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1" />.
            </summary>
            <param name="item">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only.</exception>
        </member>
        <member name="M:Nikos.Collections.Dictionary`2.Clear">
            <summary>
            Removes all items from the <see cref="T:System.Collections.Generic.ICollection`1" />.
            </summary>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only. </exception>
        </member>
        <member name="M:Nikos.Collections.Dictionary`2.Contains(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Determines whether the <see cref="T:System.Collections.Generic.ICollection`1" /> contains a specific value.
            </summary>
            <returns>
            true if <paramref name="item" /> is found in the <see cref="T:System.Collections.Generic.ICollection`1" />; otherwise, false.
            </returns>
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
        </member>
        <member name="M:Nikos.Collections.Dictionary`2.CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:System.Collections.Generic.ICollection`1" /> to an <see cref="T:System.Array" />, starting at a particular <see cref="T:System.Array" /> index.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array" /> that is the destination of the elements copied from <see cref="T:System.Collections.Generic.ICollection`1" />. The <see cref="T:System.Array" /> must have zero-based indexing.</param>
            <param name="arrayIndex">The zero-based index in <paramref name="array" /> at which copying begins.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="array" /> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="arrayIndex" /> is less than 0.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="array" /> is multidimensional.-or-<paramref name="arrayIndex" /> is equal to or greater than the length of <paramref name="array" />.-or-The number of elements in the source <see cref="T:System.Collections.Generic.ICollection`1" /> is greater than the available space from <paramref name="arrayIndex" /> to the end of the destination <paramref name="array" />.-or-Type <paramref name="T"></paramref>
            	cannot be cast automatically to the type of the destination <paramref name="array" />.</exception>
        </member>
        <member name="M:Nikos.Collections.Dictionary`2.Remove(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Removes the first occurrence of a specific object from the <see cref="T:System.Collections.Generic.ICollection`1" />.
            </summary>
            <returns>
            true if <paramref name="item" /> was successfully removed from the <see cref="T:System.Collections.Generic.ICollection`1" />; otherwise, false. This method also returns false if <paramref name="item" /> is not found in the original <see cref="T:System.Collections.Generic.ICollection`1" />.
            </returns>
            <param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only.</exception>
        </member>
        <member name="M:Nikos.Collections.Dictionary`2.ContainsKey(`0)">
            <summary>
            Determines whether the <see cref="T:System.Collections.Generic.IDictionary`2" /> contains an element with the specified key.
            </summary>
            <returns>
            true if the <see cref="T:System.Collections.Generic.IDictionary`2" /> contains an element with the key; otherwise, false.
            </returns>
            <param name="key">The key to locate in the <see cref="T:System.Collections.Generic.IDictionary`2" />.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="key" /> is null.</exception>
        </member>
        <member name="M:Nikos.Collections.Dictionary`2.Add(`0,`1)">
            <summary>
            Adds an element with the provided key and value to the <see cref="T:System.Collections.Generic.IDictionary`2" />.
            </summary>
            <param name="key">The object to use as the key of the element to add.</param>
            <param name="value">The object to use as the value of the element to add.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="key" /> is null.</exception>
            <exception cref="T:System.ArgumentException">An element with the same key already exists in the <see cref="T:System.Collections.Generic.IDictionary`2" />.</exception>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.IDictionary`2" /> is read-only.</exception>
        </member>
        <member name="M:Nikos.Collections.Dictionary`2.Remove(`0)">
            <summary>
            Removes the element with the specified key from the <see cref="T:System.Collections.Generic.IDictionary`2" />.
            </summary>
            <returns>
            true if the element is successfully removed; otherwise, false.  This method also returns false if <paramref name="key" /> was not found in the original <see cref="T:System.Collections.Generic.IDictionary`2" />.
            </returns>
            <param name="key">The key of the element to remove.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="key" /> is null.</exception>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.IDictionary`2" /> is read-only.</exception>
        </member>
        <member name="M:Nikos.Collections.Dictionary`2.TryGetValue(`0,`1@)">
            <summary>
            Gets the value associated with the specified key.
            </summary>
            <returns>
            true if the object that implements <see cref="T:System.Collections.Generic.IDictionary`2" /> contains an element with the specified key; otherwise, false.
            </returns>
            <param name="key">The key whose value to get.</param>
            <param name="value">When this method returns, the value associated with the specified key, if the key is found; otherwise, the default value for the type of the <paramref name="value" /> parameter. This parameter is passed uninitialized.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="key" /> is null.</exception>
        </member>
        <member name="P:Nikos.Collections.Dictionary`2.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1" />.
            </summary>
            <returns>
            The number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1" />.
            </returns>
        </member>
        <member name="P:Nikos.Collections.Dictionary`2.IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only.
            </summary>
            <returns>
            true if the <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only; otherwise, false.
            </returns>
        </member>
        <member name="P:Nikos.Collections.Dictionary`2.Item(`0)">
            <summary>
            Gets or sets the element with the specified key.
            </summary>
            <returns>
            The element with the specified key.
            </returns>
            <param name="key">The key of the element to get or set.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="key" /> is null.</exception>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">The property is retrieved and <paramref name="key" /> is not found.</exception>
            <exception cref="T:System.NotSupportedException">The property is set and the <see cref="T:System.Collections.Generic.IDictionary`2" /> is read-only.</exception>
        </member>
        <member name="P:Nikos.Collections.Dictionary`2.Keys">
            <summary>
            Gets an <see cref="T:System.Collections.Generic.ICollection`1" /> containing the keys of the <see cref="T:System.Collections.Generic.IDictionary`2" />.
            </summary>
            <returns>
            An <see cref="T:System.Collections.Generic.ICollection`1" /> containing the keys of the object that implements <see cref="T:System.Collections.Generic.IDictionary`2" />.
            </returns>
        </member>
        <member name="P:Nikos.Collections.Dictionary`2.Values">
            <summary>
            Gets an <see cref="T:System.Collections.Generic.ICollection`1" /> containing the values in the <see cref="T:System.Collections.Generic.IDictionary`2" />.
            </summary>
            <returns>
            An <see cref="T:System.Collections.Generic.ICollection`1" /> containing the values in the object that implements <see cref="T:System.Collections.Generic.IDictionary`2" />.
            </returns>
        </member>
        <member name="M:Nikos.Collections.FibonacciHeap`1.Clone">
            <summary>
             Creates a new object that is a copy of the current instance.
            </summary>
            <returns>A new object that is a copy of this instance.</returns>
        </member>
        <member name="M:Nikos.Collections.FibonacciHeap`1.System#ICloneable#Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>
            A new object that is a copy of this instance.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:Nikos.Collections.FibonacciHeap`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.
            </returns>
            <filterpriority>1</filterpriority>
        </member>
        <member name="M:Nikos.Collections.FibonacciHeap`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="T:Nikos.Cache.MethodInvoke">
            <summary>
             Invoke the method asociate with the executer
            </summary>
            <param name="args">Arguments of method</param>
        </member>
        <member name="T:Nikos.Cache.Executer`1">
            <summary>
             Es un mecanismo para ejecutar un metodo asociado a los elementos de la memoria cache antes de ser eliminados
            </summary>
            <typeparam name="T">El valor del elemento en la memoria cache</typeparam>
        </member>
        <member name="M:Nikos.Cache.Executer`1.Execute">
            <summary>
            Execute the asociated method
            </summary>
        </member>
        <member name="M:Nikos.Cache.Executer`1.CompareTo(Nikos.Cache.Executer{`0})">
            <summary>
                                Compares the current object with another object of the same type.
            </summary>
            <returns>
                                A 32-bit signed integer that indicates the relative order of the objects being compared. The return value has the following meanings: 
                                Value 
                                Meaning 
                                Less than zero 
                                This object is less than the <paramref name="other" /> parameter.
                                Zero 
                                This object is equal to <paramref name="other" />. 
                                Greater than zero 
                                This object is greater than <paramref name="other" />. 
            </returns>
            <param name="other">
                                An object to compare with this object.
                            </param>
        </member>
        <member name="M:Nikos.Cache.Executer`1.CompareTo(System.Object)">
            <summary>
                                Compares the current instance with another object of the same type and returns an integer that indicates whether the current instance precedes, follows, or occurs in the same position in the sort order as the other object.
            </summary>
            <returns>
                                A 32-bit signed integer that indicates the relative order of the objects being compared. The return value has these meanings: 
                                Value 
                                Meaning 
                                Less than zero 
                                This instance is less than <paramref name="obj" />. 
                                Zero 
                                This instance is equal to <paramref name="obj" />. 
                                Greater than zero 
                                This instance is greater than <paramref name="obj" />. 
            </returns>
            <param name="obj">
                                An object to compare with this instance. 
                            </param>
            <exception cref="T:System.ArgumentException"><paramref name="obj" /> is not the same type as this instance. 
                            </exception><filterpriority>2</filterpriority>
        </member>
        <member name="P:Nikos.Cache.Executer`1.Value">
            <summary>
            The value on memory cache
            </summary>
        </member>
        <member name="P:Nikos.Cache.Executer`1.m_Info">
            <summary>
            Method asociate with Value
            </summary>
        </member>
    </members>
</doc>
